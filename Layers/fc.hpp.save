#ifndef FC_HPP
#define FC_HPP

template<typename Activation>

class FC : public Layers
{
    public:
        /** constructor and destructor **/
        FC(const int input_size,const int output_size);
        virtual ~FC();
        void init(const Scalar& mu, const Scalar& sigma, RNG& rng) {
		m_weight.resize(this->m_in_size, this->m_out_size);
		m_bias.resize(this->m_out_size);
		m_dw.resize(this->m_in_size, this->m_out_size);
		m_db.resize(this->m_out_size);

		internal::set_normal_random(m_weight.data(), m_weight.size(), rng, mu, sigma);
		internal::set_normal_random(m_bias.data(), m_bias.size(), rng, mu, sigma);
	}


    private:
        typedef Eigen::Matrix<Scalar, Eigen::Dynamic, Eigen::Dynamic> Matrix;
        typedef Eigen::Matrix<Scalar, Eigen::Dynamic, 1> Vector;
        Matrix tensor_weight;  // weights
        Vector tensor_bias;    // bias
        Matrix tensor_dw;      // derivative of the weights
        Vector tensor_db;      // derivative of the bias
        Matrix tensor_z;       // z = w*x + b
        Matrix tensor_a;       // a = function(z)
        Matrix tensor_din;     //  derivative of the input
};

#endif // FC_HPP
